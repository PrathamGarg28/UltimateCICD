pipeline {
  agent{
    docker {
        image 'prathamgarg28/custom-maven-docker-agent:latest'
        args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
      }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.1.13:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd spring-boot-app
            mvn sonar:sonar \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=$SONAR_URL
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "prathamgarg28/ultimatecicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Cleanup Build Artifacts') {
      steps {
        sh 'rm -rf spring-boot-app/target'
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "UltimateCICD"
            GIT_USER_NAME = "prathamgarg28"
        }
        steps {
          withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
                git config user.email "prathamgarg1122@gmail.com"
                git config user.name "PrathamGarg28"
                BUILD_NUMBER=${BUILD_NUMBER}
                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g"spring-boot-app-manifests/deployment.yml
                git add spring-boot-app-manifests/deployment.yml
                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                // BUILD_NUMBER=${BUILD_NUMBER}
                // manifestPath="spring-boot-app-manifests/deployment.yml"
                # Check and replace image tag in deployment.yml
                // grep -q 'replaceImageTag' ${manifestPath}
                // if [ $? -eq 0 ]; then
                //   sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" ${manifestPath}
                // else
                //   sed -i "s/\\(:.*:\\)[0-9]\\{1,\\}/\\1${BUILD_NUMBER}/g" ${manifestPath}
                // fi
                // git add ${manifestPath}
                // git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "Nothing to commit"
                // git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
              '''
          }

        }
    }
  }
}
